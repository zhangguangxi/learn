


SolrCloud和MultiCore的区别
    SolrCloud模式下有Cluster,Node,Collection,Shard,LeaderCore，ReplicationCore几个概念

    Cluseter集群:集群是一组作为一个单元管理的的Solr节点。真个集群必须使用同一套schema和solrconfig
    Node节点:一个运行SOlr的JVM实例
    Shared碎片:一个分区通过指定的复制因子(replication factor)被存储在多个节点上。所有的这些节点共同形成一个碎片。一个节点可能有多个碎片组成。
    Leader负责人:每个碎片(shard)都有一个节点标识作为它的领导。所有写操作经过领导节点写入指定的分区。
    Replication Factor复制因子的最少数量的文件的副本集群维护。

    Collection:collection是否访问cluster的入口，colection是一个逻辑存在的东西，因此是可以跨Node的，在任意节点上都可以访问Collection

    Shard
        逻辑存在，可以跨Node 1个shard下面能且包含一个Leader
                          1个shard线面可以包含0个或多个Repllicatoin

    solrCloud的工作模式
        在solrCloud模式下，同一个集群里所有Core的配置是统一的。Core有leader和replication两种角色，每个Core一定属于一个Dhard
                         Core在Shard中扮演Leader还是replication由Solr内部自动协调，目前没有找到人工干预的方法，也不需要干预
                         因为SolrCloud的过程:Solrj向Zookeeper咨询Colleciton的地址，Zookeeper返回存货的节点供访问，插入数据的是偶
                         由SolrClod内部卸掉数据分发


     MultiCore工作模式
              MultiCore模式下各Core之间是相互独立的，同一个Jvm下可以同时运行多个不同配置的
              Core。当然在这种模式下，也可以通过参数同时反问多个Core，可以通过配置实现Master-
              replication主从模式的复制，不过这些都是需要自己编写的JavaApp来完成。

     Solr基本配置(solr.xml)
     solr应用配置(SolrConfig.xml)
     Solr数据结构配置(SchemaXml)




2016-07-28任务
Solr查询语法
     1.1. 首先假设我的数据里fields有:name, tel, address 预设的搜寻是name这个字段, 如果要搜寻的数据刚好就是 name 这个字段,就不需要指定搜寻字段名称.
     1.2  查询规则
            如欲查询特定字段(非预设字段)，请求在查询前加上该字段名称":"(不包含"号)符号,例如:address:北京市海淀区 上地软件园 tel:88xxx1
            1>q 代表query input
            2>version 到代表solr版本(建议不要变动此变量)
            3>start 代表结果从哪一笔结果资料开始,预设为0代表第一笔,rows是说要显示几笔数据，预设为10笔，如果要显示第10到30笔就改为
            http://localhost:8080/solr/select?ident=on&version=2.2&q=address:北京市海淀区上地软件园+tel:88xxx1&version=2.2&start=10&rows=20&ident=on
            (ident代表输出xml要不要缩行，预设为开启on)
     1.3    另外,要限定输出结果的内容可用"fl="加上你要的字段名称，在fl=之后加上了name,address,tel
            查询参数
            常用
            q     - 查询字符串，必须的
            fl    - 指定返回你安歇字段内容，用逗号或空格分隔多个。
            start - 返回第一条记录在完整找到结果中的偏移量，0开始，一般分页用
            rows  - 指定返回结果最多有多少条纪录，配合start来实现分页
            sort  - 拍下，格式sort=<field name>+<desc|asc>[field name]+<dsc|asc] (inStock desc,price asc)表示先"inStock"降序，再"price"升序,默认是相关性降序
            q.op  - 覆盖schema.xml的defaultOperator(有空格时用"AND"还是用"OR"操作逻辑),一般默认制定
            df    - 默认的查询字段，一般默认制定
            qt    - (query type)制定那个类型来处理查询请求，一般不用制定，默认是standard
            ident - 返回的结果是否缩进，默认关闭，用ident=true|on开启,一般调试json，php,phps,ruby输出才有必要用这个参数
            version 查询语法的版本，建议不使用它，有服务器制定默认值
            [Solr的检索运算符]
            “:” 指定字段查指定值，如返回所有值*:*²
            “?”表示单个任意字符的通配
            “~”表示模糊检索，如检索拼写类似于”roam”的项这样写：roam~将找到形如foam和roams的单词；roam~0.8，检索返回相似度在0.8以上的记录。
               邻近检索，如检索相隔10个单词的”apache”和”jakarta”，”jakarta apache”~10
            “^”控制相关度检索，如检索jakarta apache，同时希望去让”jakarta”的相关度更加好，那么在其后加上”^”符号和增量值，即jakarta^4 apache
             布尔操作符AND、||²
             布尔操作符OR、²&&
             布尔操作符NOT、!、-²（排除操作符不能单独与项使用构成查询）
             “+” 存在操作符，要求符号”+”后的项必须在文档相应的域中存在²
             ( ) 用于构成子查询²
             [] 包含范围检索，如检索某时间段记录，包含头尾，date:[200707 TO 200710]
             {}不包含范围检索，如检索某时间段记录，不包含头尾
             date:{200707 TO 200710}
             timestamp:[* TO NOW]
             createdate:[1976-03-06T23:59:59.999Z TO *]
             createdate:[1995-12-31T23:59:59.999Z TO 2007-03-06T00:00:00Z]
             pubdate:[NOW-1YEAR/DAY TO NOW/DAY+1DAY]
             createdate:[1976-03-06T23:59:59.999Z TO 1976-03-06T23:59:59.999Z+1YEAR]
             createdate:[1976-03-06T23:59:59.999Z/YEAR TO 1976-03-06T23:59:59.999Z]
             ” 转义操作符，特殊字符包括+ – & | ! ( ) { } [ ] ^ ” ~ * ? : “











Solr函数查询
    http://wiki.apache.org/solr/FunctionQuery
Lucene查询语法
    Lucene查询语法
    Posted on 一月 23, 2013 in: Solr入门|Lucene查询语法已关闭评论
    Lucene提供了丰富的API来组合定制你所需要的查询器，同时也可以利用 Query Parser提供的强大的查询语法解析来构造你想要的查询器。本文章详细的介绍了Lucene的查询语法。通过Java语法分析器把一个查询字符串解析成 Lucene的查询器。在你选择使用Query Parser前，请考虑以下事项：
    如果你打算在程序中拼接查询语法串然后再利用Query Parser转换，那么强烈建议你利用相应的API来自己构造查询器。也就是说，Query Parser是为手工输入高级查询设计的，而不是为程序拼接语法串而设计的。 不分词的字段也最好通过相应的API添加到查询器中，而不是通过Query Parser。Query Parser 使用的Analyser分析器，作用是将用户手工输入的文本转化为相应的Term。如果一个字段的值是通过程序生成的（例如日期字段，关键词字段等），那 么在查询的时候也应该保持前后一致，利用程序生成相应的格式来查询。
    在查询的目标中，如果字段全部是程序生成的文本，（例如补齐的日期字段等），最好使用Query Parser以便查询的时候也是一致的格式。至于其它的，例如日期范围查询，关键字查询等，最好调用相应的API来构建查询器。目标字段中如果仅仅拥有有 限的枚举值时，最好通过下拉列表提供给用户选择，然后利用TermQuery添加到查询器中，而不是而其拼接到查询字符串然后利用Query Parser来解析。
    Terms
    一个查询将分解为若干Term以及操作符，有两种Term，其一是单一Term，其二为短语。单一Term是经过分析器分词后的最小单元，他就是一个简单 的词，例如“Test”和“Hello”。短语则是一组被双引号括起来的一组词，例如：“Hello dolly”，多个Term可以通过布尔操作合并在一个更加复杂的查询器中。
    注意：一般来说，创建索引的分析器和查询的分析器最好保持一致（当然也有特殊情况，比如单字索引，分词组合查询），所以选择一个不会干扰查询词的分析器是很重要的。
    Fields
    Lucene支持多字段数据，当你在查询的时候你可以指定一个字段查询，也可以使用默认的字段。你可以使用 字段名 + “：” + 查询词来指定字段名搜索。举个例子，让我们假定Lucene的索引中含有两个字段，Title字段和Text字段，其中Text字段是默认字段，当你想找 到一篇文档其中标题包含“The Right Way”同时文本中包含“go”，你可以输入：
    title:”The Right Way” AND text:go
    或者：
    title:” The Right Way ” AND go
    如果字段是默认字段的话，在查询语法中可以不需要显式指定。注意，使用默认字段有可能会造成如下的结果：
    title:Do it right
    以上查询将查找标题中含有“Do”，Text字段字段中含有“it”和“right”的文档，因为Text是默认字段，所以如果想要查找Title中完整包含的很用引号引起来。

    二、模糊查询
    Term Modifiers
    Lucene支持在Term中使用通配符来支持模糊查询。

    Wildcard Searches [类：org.apache.lucene.search.WildcardQuery]
    Lucene支持单个或者多个字符的通配符查询，匹配单一字符使用符号“?”，匹配多个字符使用符号“*”。
    “?”通配符将查找所有满足通过一个字符替换后符合条件的文档。比如：搜索“test”和“text”你可以使用：
    te?t
    “*”通配符将查询0个或者多个字符替换后符合条件的。举例来说，查询test，tests或者tester，你可以使用一下字符串来搜索：
    test*
    当然，你也可以将“*”放在字符的中间
    te*t
    注意：你不能将“*”和“?”放在第一个字符来查询。（Lucene应该是出于性能考虑，所以不支持该功能）
    Fuzzy Searches [org.apache.lucene.search.FuzzyQuery]
    Lucene支持基于编辑距离算法的模糊搜索，你可以使用波浪符号“~”放在查询词的后面，比如搜索一个与“roam”拼写相近的词可以使用：
    roam~
    该查询将寻找类似“foam”和“roams”等的词语。也可以说是相似度查询。
    Proximity Searches [org.apache.lucene.search.PrefixQuery]
    Lucene支持指定距离查询，你可以使用波浪号“~”加数字在查询词后。举例来说搜索“apache”和“jakarta”距离10个字符以内，你可以使用如下语法：
    “jakarta apache”~10
    通过这个语法支持，我们可以单字索引，分词查询，分词完后，满足每个词的单字必须间距为1。这样可以保证100%的召回率，但是在索引方面将造成索引臃肿，同时查询速度也将在某程度上降低，一般来说，在150W文章数据到200W数据的时候性能将会明显的降低。
    Range Searches [org.apache.lucene.search.RangeQuery]
    范围查询允许你指定某个字段最大值和最小值，查询在二者之间的所有文档。范围查询可以包含或者不包含最大值和最小值，排序是按照字典顺序来排序的。
    mod_date:[20020101 TO 20030101]
    这个将查找满足mode_date字段在大于等于20020101，小于等于20030101范围的所有文档，注意：范围查询并不是为日期字段专设的，你也可以对非日期字段进行范围查询。
    title:{Aida TO Carmen}
    这个将查找所有标题在Aida和Carmen之间但不包含Aida和Carmen的文档。包含最大值和最小值的查询使用方括号，排除则使用花括号。

    三、优先级
    Boosting a Term
    Lucene支持给不同的查询词设置不同的权重。设置权重使用“^”符号，将“^”放于查询词的尾部，同时跟上权重值，权重因子越大，该词越重要。设置权重允许你通过给不同的查询词设置不同的权重来影响文档的相关性，假如你在搜索：
    jakarta apache
    如果你认为“jakarta”在查询时中更加重要，你可以使用如下语法：
    jakarta^4 apache
    这将使含有Jakarta的文档具有更高的相关性，同样你也可以给短语设置权重如下：
    “jakarta apache”^4 “jakarta lucene”
    在默认情况下，权重因子为1，当然权重因子也可以小于1。

    四、Term操作符
    Boolean operators
    布尔操作符可以将多个Term合并为一个复杂的逻辑查询。Lucene支持AND，
    +，OR，NOT， -作为操作符号。注意，所有的符号必须为大写。
    OR
    OR操作符默认的连接操作符。这意味着，当没有给多个Term显式指定操作符时，将使用OR，只要其中一个Term含有，则可以查询出文档，这跟逻辑符 号||的意思相似。假设我们查询一个文档含有“jakarta apache”或者“jakarta”时，我们可以使用如下语法：
    “jakarta apache” jakarta
    或者
    “jakarta apache” OR jakarta
    AND
    AND操作符规定必须所有的Term都出现才能满足查询条件，这跟逻辑符号&&意思相似。如果我们要搜索一个文档中同时含有“jakarta apache”和“jakarta lucene”，我们可以使用如下语法：
    “jakarta apache” AND “jakarta lucene”
    +
    +操作符规定在其后的Term必须出现在文档中，也就是查询词中的MUST属性。举个例子来说，当我们要查询一个文档必须包含“jakarta”，同时可以包含也可以不包含“lucene”时，我们可以使用如下语法：
    +jakarta apache
    NOT
    NOT操作符规定查询的文档必须不包含NOT之后的Term，这跟逻辑符号中的!相似。当我们要搜索一篇文档中必须含有“jakarta apache”同时不能含有“Jakarta lucene”时，我们可以使用如下查询；
    “jakarta apache” NOT “jakarta lucene”
    注意：NOT操作符不能使用在单独Term中，举例来说，以下查询将返回无结果：
    NOT “jakarta apache”
    –
    -操作符排除了包含其后Term的文档，跟NOT有点类似，假设我们要搜索“Jakarta apache”但不包含“Jakarta lucene”时，我们使用如下语法：
    “jakarta apache” -“jakarta lucene”
    Grouping
    Lucene支持使用圆括号来将查询表达式分组，这将在控制布尔控制查询中非常有用。举例来说：当搜索必须含有“website”，另外必须含有“jakarta”和“apache”之一，我们可以用如下语法：
    (jakarta OR apache) AND website
    这种语法对消除歧义，确保查询表达式的正确性具有很大的意义。
    Field Grouping
    Lucene支持对字段用圆括号来进行分组，当我们要查询标题中含有“return”和“pink ranther”时，我们可以使用如下语法：
    title:(+return +”pink panther”)
    Escaping Special Characters
    Lucene支持转义查询中的特殊字符，以下是Lucene的特殊字符清单：
    + – && || ! ( ) { } [ ] ^ ” ~ * ? : \
    转义特殊字符我们可以使用符号“\”放于字符之前。比如我们要搜索(1+1):2，我们可以使用如下语法：
    \(1\+1\)\:2

    Tips: QueryParser.escape(q)  可转换q中含有查询关键字的字符！如：* ,? 等
Solr层面搜索(Facet)参数详细解
    solr将以导航为目的的查询结果称为facet，它并不会修改查询结果信息，只是在查询结果上根据分类添加了count信息,然后用户根据count信息
        做进一步的查询，比如淘宝中的查询列表中，上面会表示不同类目相关查询结果的数量
        facet都是在查询时通过查询指定，主要好处就是可以对任意搜索条件进行组合，避免无效搜索，改善搜索体验。
        http://wiki.apache.org/solr/SimpleFacetParameters

Solr从数据库导入数据（DIH）
地址:http://www.solr.cc/blog/?p=260

Solr从数据库导入数据（DIH）
Posted on 一月 23, 2013 in: Solr入门|Solr从数据库导入数据（DIH）已关闭评论
一. 数据导入(DataImportHandler-DIH)

DIH 是solr 提供的一种针对数据库、xml/HTTP、富文本对象导入到solr 索引库的工具包。这里只针对数据库做介绍。

A、准备以下jar包

apache-solr-dataimporthandler-4.0.0.jar

apache-solr-dataimporthandler-extras-4.0.0.jar

apache-solr-dataimportscheduler-1.1.jar(增量导入使用)

数据库对应的jdbc驱动包这里使用的是Oracle oracle10g.ja放入Tomcat6.0.36/webapps/sol/WEB-INF/lib 中

B、配置solrconfig.xml

在solrconfig.xml中加入如下配置：

<requestHandlername=”/dataimport” class=”org.apache.solr.handler.dataimport.DataImportHandler”>

<lst name=”defaults”>

<str name=”config”>xx-data-config.xml</str>

</lst>

</requestHandler>

C、配置数据源

在与solrconfig.xml文件同级的目录中建立上述配置中的xx-data-config.xml文件，配置如下

dih

query属性为全导入的时候使用。其他为增量导入使用。

<?xml version=”1.0″ encoding=”UTF-8″ ?>

<dataConfig>

<dataSource type=”JdbcDataSource”

driver=”oracle.jdbc.driver.OracleDriver”

url=”jdbc:oracle:thin:@192.168.0.129:1521:orcl”

user=”username”

password=”password”/>

<document>

<entity name=”business_info” pk=”ID”

query=”select t.ID id,business_name,bussiness_type from business t”

deltaImportQuery=”select t.ID id,business_name,bussiness_type from business t where id=’${dataimporter.delta.ID}'”

deltaQuery=”select t.ID id,business_name,bussiness_type from business t where  to_char(updatetime,’yyyy-mm-dd hh24:mi:ss’)> ‘${dataimporter.last_index_time}'”>

<field column=”ID” name=”id”/>

</entity>

</document>

</dataConfig>



至此所有DIH的配置完成，在浏览器中输入命令：

全导入：

http://localhost:8085/solr/core0/dataimport?command=full-import&commit=ture

增量导入：

http://localhost:8085/solr/core0/dataimport?command=delta-import&clean=false&commit=ture

查看导入状态

http://localhost:8085/solr/core0/dataimport?command=status

D、处理CLOB字段

<entity name=”meta” query=”select id,filename,content,bytes from documents” transformer=”ClobTransformer”>

<field column=”ID” name=”id” />

<field column=”CONTENT” name=”CONTENT” clob=”true” />

</entity>

ClOB 字段的 column 必须大写！！

E、DIH内存溢出错误

在使用DIH时，容易报内存溢出错误。可以通过设置jvm大小来解决。设置方法如下：

在tomcat\bin\startup.bat 加入SET JAVA_OPTS=-Xms128m -Xmx1024m 配置 这里设置的是1024M，根据情况可以适量增大

F、自动全导入和自动增量导入

此功能可以自己写程序实现，也可利用apache-solr-dataimportscheduler-1.0.jar包完成此功能。配置如下：

修改solr.war中WEB-INF/web.xml, 在servlet节点前面增加:

<listener>
<listener-class>
org.apache.solr.handler.dataimport.scheduler.ApplicationListener
</listener-class>
</listener>

将apache-solr-dataimportscheduler-.jar 中 dataimport.properties 取出并根据实际情况修改,然后放到 solr.home/conf (不是solr.home/core/conf) 目录下面

具体配置可参考：http://code.google.com/p/solr-dataimport-scheduler/










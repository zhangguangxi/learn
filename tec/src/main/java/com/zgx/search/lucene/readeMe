lucene是什么？
   是apache软件基金会4 jakarat项目组的一个子项目，是一个开放源代码的全文检索引擎工具包，但是他不是一个完整的全文检索引擎，而是一个全文检索引擎的架构
提供了完整的查询引擎和索引引擎，部分文本分析引擎(英文与德文两种西方语言)


lucene的目的是什么？
  为软件开发人员提供一二简单易用的工具包，以方便的在目标系统中实现全文检索的功能。或者是以此为基础建立起来的完成的全文检索引擎。


lucene突出的有点
 1)索引文件格式独立于应用品台。Lucene定义了一套以8字节为基础的索引文件格式，是的兼容系统或者不同平台的应用能够共享家里的索引文件。
 2)在传统全文检索引擎倒排索引的基础上，实现了分块索引，能够针对新的文件建立小文件索引，提升索引速度。然后通过与原有索引的合并，达到优化的目的。
 3)有限的面相对象的系统架构，是的lucene扩展学习难度降低，方便扩充新功能。
 4)设计了独立于语言和文件格式的文本分析接口，所引起通过接受Token流完成索引文件的创立。用户扩展的语言格式和文件格式，只需要实现文本分析的接口
 5)已经默认实现了一套强大的查询引擎，用户无需自己编写代码即可使系统可获得强大的查询功能，lucene的查询实现中默认实现了布尔操作，模糊查询，分组查询等等。


关键字概念
    Document:是用来描述文档的，智力的文档可以指一个HTML页面，一封电子邮件或者一个文本文件。一个Document对象有多个Field对象组成。可以吧一个Document对象
             想象成数据库中的一个记录，而每个Field对象就是记录的一个字段

    Field：用来描述一个文档的某个属性的，比如一封电子邮件的标题和内容可以用两个字段分别描述

    Analyzer:在一个文档被索引之前，首先需要对文档内容进行分词处理，这部分工作就是由Analyzer来做的。Analyzer类是一个抽象类，它有多个实现。针对不同的语言和应用需要选择
             适合的Analyzer。Analyzer把分词后的内容交给IndexWriter来建立索引。
    Directory:这个类代表了lucene的索引的存储位置，他目前有两个实现，第一个是FSDirectoy，它表示一个存储在文件系统中的索引位置。第二个是RAMDirectory,它表示一个存储在
              内存中的索引位置。

    Query:这是一个抽象类，他有多个实现比如TermQuery,BooleanQuery,PrefixQuery这个类的母的是把用户输入的查询字符串封装成Lucene能够识别的Query

    IndexSearcher:是用来建立好的索引上进行搜索的。它只能以只读的方式打开一个索引，所以可以有多个IndexSearcher的实例在一个索引上进行操作。

    Hits:用来保存搜索结果的

    使用Lucene都是围绕索引展开
    1、写索引 IndexWriter
    2、读索引 IndexReader
    3、查索引 IndexSearcher
    4、封装查询条件 QueryParser
    5、查询已查到的的索引得到结果及 TopDoc，可以得到Document的一个集合



Indexer 写索引
   1、定义一个全局变量IndexWriter(写的索引操作类)
   2、构造方法中
        1)传入参数："目标索引存储位置"
        2)创建分词器(文档被索引之前,需要经过分词器的处理)
        3)创建索引写操作配置器(分词器将作为参数)
        4)获取索引存储位置
        5)创建一个全局变量的IndexWriter的对象通过“索引存在位置”与”索引操作配置器“

   3、index(String dataDir)  为指定目录的数据文件创建索引 -->创建索引的入口
      1)根据数据目录遍历出需要创建索索引的文件
      2)indexFile(File file) 索引单个文件
           1))getDocument(File file) 将单个文件的相关信息以字段的形式存入到Document中并返回

Searcher 查询索引
    1、search(String indexDir,String query) 指定所以目录  指定查询条件
                 1)获取索引地址  Directory dir = FSDirectory.open(Paths.get(indexDir))
                 2)读取索引地址  IndexReader reader = DirectoryReader.open(dir)
                 3)创建查询对象  new QueryParse("content",new StandardAnalyzer())
                 4)指定查询内容  QueryParse.parse(query)
                 5)通过搜索对象搜索 indexSearcher.search(QueryParse.parse(query),10)
                 6)处理搜索对象返回的结果



关键词解刨
         索引(Index)：在Lucene中的一个索引是放在一个文件夹中的。
         段(Segment):一个索引可以包含多个段，段与段之间是独立的，添加新文档可以生成新的段，不同的段可以合并(相同前缀文件的术语同一个段，segments.gen和segments_x是段的元数据文件)
         文档(Document)：文档是我们建索引的基本单位，不同的文档是保存在不同的段中的，一个段可以包含多篇文档。新添加的文档是单独保存在一个新生成的段中，随着段的合并
                       不同的文档合并到同一个段中。
         域(Field):一篇文档包含不同类型的信息，可以分开索引，比如标题，时间，正文，作者等，都可以保存在不同的域里。不同域的索引方式不同。
         词(Term):词是索引的最小单位，是经过词法分析和语言处理后的字符串。


名称                    文件扩展名                               描述
段文件                  segments_N                 保存了索引包含的多少段，每个段包含多少文档。
段元数据                .si                        保存了索引段的元数据信息。
锁文件                  write.lock                 防止多个IndexWriter同时写到一份索引文件中。
复合索引文件            .cfs,.cfe                  把所有索引信息都存储到复合索引文件中。
索引段的域信息          .fnm                       保存此段包含的域，以及域的名称和域的索引类型。
索引段的文档信息        .fdx,.fdt                  保存此段包含的文档，每篇文档中包含的域以及每个域的信息。
索引段Term信息          .tim,.tip                  .tim文件中存储着每个域中Term的统计信息且保存着只想.doc,.ops,and .pay索引文件的指针                                                  .tip文件保存着Term字段的索引信息，可支持随机访问。

文档中Term的位置信息    .pos                        保存此段中每个文档对应的Term位置信息。
文档的有效载荷和部分位置信息 .pay                   保存字段中的每个文档有效载体(payload)和Term的位置信息(offsets)


索引字段加权因子           .nvm                文件保存索引子弹加权因子的元数据
                          .nvd               文件保存索引子弹加权数据


索引文档加权因子           .dvm                文件保存索引文档加权因子的元数据
                          .dvd                文件保存索引文档加权数据

索引矢量数据                .tvd             存储此文档Term，Term频率，位置信息，有效载荷信
                        `  .tvx `           索引文件，用于把特定的文档加载到内存
                           .tvf             保存索引字段的矢量信息

有效文档                    .liv             保存有效文档的索引文件信息



-- ##############################################################2016-07-06#######################################################################
第五篇 lucene索引的增删改查
    1、模拟数据数据
    2、定义索引存储位置
    3、根据索引存位置获取“写索引器”
    4、根据索引位置获取“读索引器”

    辅助方法:1)获取默认分词器
             2)获取索引目录










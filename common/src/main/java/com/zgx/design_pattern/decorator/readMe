装饰器模式
   装饰器能够实现动态的为对象添加功能，是从一个对象外部来给对象添加功能。通常给对象添加功能，要么直接修改对象添加相应的功能，要么派生对应的子类来扩展，或是使用对象的组合方式。
   显然，直接修改对应的类这种方式不可取。在面向对象的设计中，而我们也应该尽量使用对象的组合，而不是对象继承来扩展和复用共鞥。装饰器模式就是基于对象组合的方式，可以很灵活的给
   对象添加所需要的功能。装饰器模式的本质就是动态组合。动态是手段，组合才是目的。总是，装饰模式是通过把复杂的功能简单化，分散化，然后再运行期间，根据需要动态组合的这样一个模式



   Java中IO是明显的装饰器模式的运用。FilterInputStream,FilterOutPutStream,FilterRead,FilerWriter分别为具体装饰器的
   弗雷，相当于Decorator类，它们分别实现了InputStream OutputStream Reader Writer类(这些类相当于Component,是其他组件类的父类，也是
   Decorator类的父类)

   在以下两种情况下可以考虑使用装饰器模式
   1)需要在不影响其他对象的情况下，以动态、透明的方式给对象添加职责
   2)如果不适合使用子类来扩展的时候，可以考虑使用装饰器模式


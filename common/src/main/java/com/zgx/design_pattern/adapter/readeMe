适配器模式
    适配器模式把一个类的接口变成客户端所期待的另一种接口，从而是原本因接口不匹配而无法在一起工作的两个类能够在一起工作。

   适配器的用途:用电器做例子，笔记本电脑的插头一般都是三相的，阴极 阳极 还有一个地极。而有些地方的电源电源插座却只有两极，没有地极。
              电源插座与笔记本电脑的电源插头不匹配是的笔记本电脑无法使用，这时候一个三相到两相的转换器(适配器)就饿能解决此问题
              而这正想是本模式做的事情。

   类适配器模式
            模式所涉及的角色有
                 目标(Target)角色:这就是所期待得到的接口
                 源(Adapee)角色:现在需要适配的接口。
                 适配器(Adaper)角色:适配器类是本模式的核心。适配器把元接口转换成目标接口，显然这一角色不可以是接口，而必须是具体类


   对象适配器模式
            与类的适配器模式一样，对象适配器模式把被适配器的类API转换成目标类的API，与类的适配器模式不同的是，对象的适配器模式不是使用继承
            关系连接到Adaptee类，而是使用委派关系连接到Adaptee类


   类适配器和对象适配器的权衡
        类适配器使用对象继承的方式，是静态定义方式；而对象适配器使用对象组合的方式，是动态组合的方式

        对于类适配器:由于适配器直接继承了Adaptee，使得适配器不能Adaptee的子类一起工作，因为继承是静态关系，当适配器继承了Adaptee后，就不
        可能再去处理Adapee的子类了

        对于对象适配器:一个适配器可以把多种不同的源适配到同一个目标，换言之，同一个适配器可以把源类和它的子类都适配到目标接口，因为对象适配器
                     采用的是对象租和的关系，只要对象类型正确，是不是子类都无所谓

        对于类适配器:适配器可以重定义Adapteed 部分行为，相当于子类覆盖父类的部分实现方法。

        对于对象适配器:要重定义Adaptee的行为比较困难，这种情况下，可需要定义Adaptee的子类来实现重定义，然后让适配器组合子类。虽然重定义
                    Adatee的行为比较困难,但是想新增加一些新的行为则方便的很，二期新增阿基的行为可同时适配所有的源。

        对于类适配器:仅仅引入了一个对象，并不需要额外的引用来间接得到Adaptee
        对于类适配器:需要额外的医用间接得到Adaptee


适配器模式的优点
    更好的复用
        系统需要使用现有的类，而此类的借口不符合系统的需要，那么通过适配器模式可以让这功能得到更好的复用

    更好的扩展
         在实现适配器功能的时候，可以调用自己开发的功能，从而自然地扩展系统的功能。

适配器模式的缺点
    过多的使用适配器，会让系统非常凌乱，不易整体进行把握。不如明明看到调用接口A，其实内部适配成了B接口的实现，一个系统如果太多出现这种情况
    无异于是一种灾难。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。


    适配器模式的用意是要改变源接口，以便于目标接口相容。缺省适配的用意稍有不同，它是为了方便建立一个不平庸的适配器而体统的一种不平庸实现。
    在任何时候，如果不准备实现一个接口的所有方法时候，就可以使用"缺省适配模式"制造一个抽象类，给出所有方法的平庸实现。这样，从这个抽象类
    在继承下去的子类就不必实现所有方法了。



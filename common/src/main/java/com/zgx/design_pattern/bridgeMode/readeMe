模式动机
    设想如果要绘制矩形、圆形、正方形，我们至少需要4个形状类，但是如果绘制的图形需要具有不同的颜色
 如红色、绿色、蓝色等，此时至少有两种设计方案。


 第一种方案是为每一种形状都提供一种各种颜色的版本
 第二种方案是根据实际需要对形状和颜色进行组合

 对于两个变化维度(即两个变化的原因)的系统，采用方案二来记性设计系统中累的个数更少，而且系统图扩张更为方便
 设计方案二即是桥接模式的应用。桥接模式将继承关系转换为关联关系，从而降低了类与类之间的耦合，减少了
 代码编写两


 模式定义
    桥接模式(Bridge Pattern):将抽象部分与它的实现部分进行分离，是它们之间都可以独立地变化
    它是一种对象结构模型，又称为柄体模式或接口模式

 桥接模式的角色和职责
    Client
        Bridge模式的使用者
    Abstraction
        抽象类接口(接口或抽象类)
        维护对行为实现(Implementor)的引用
    Refined Abstraction
         Abstraction子类
    Implementor
        行为实现类接口(Abstraction接口定义了基于Implementor接口的更高层次的操作)

    ConcreteImplementor
                Implementor子类


将抽象化(Abstraction)与实现化(Implementation)脱耦，使得二者可以独立地变化，也就是抽象化
实现化和脱耦
抽象化：存在多个试题中的共同的概念性联系，就是抽象化，作为一个过程，抽象化就是忽略一些信息，从而
      把不同的实体当做同样的实体对待。

实现化：抽象化的具体实现，就是示现化

脱耦：所谓耦合就是两个实体的行为的某种强关联。而将他们的强关联去掉，就是耦合的解耦或者脱耦。在这里
     脱耦是将抽象化和示现化之间的耦合解开，或者说将他们之间的强关联改换成若关联


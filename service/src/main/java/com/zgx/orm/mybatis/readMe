MyBatis
    是支持定制化SQL，存储过程以及高级映射的优秀持久层框架。MyBatis避免了几乎所有的JDBC代码和手动设置参数以及获取结果集。MBatis可以对配置和原生Map使用简单的XML或朱姐，将接口和Java的POJOs(Plain Old
    Java Objects普通的Java对象)映射成数据库中的记录

安装
    要使用MyBatis，只需要将mybatis-x.x.x.jar文件置于classpath中即可
    如果使用Maven来构建项目，则需要将下面的dependency代码置于pom.xml文件中:
    <dependency>
        <groupId>org.mybatis<groupId>
        <artifactId>mybatis</artifactId>
        <version>x.x.x</version>
    </dependency>

  从XML中构建SqlSessionFactory
      每个基于MyBatis的应用都是以一个SqlSessionFactory的实例为中心的。SqlSessionFactory的实例可以通过SqlSessionFactoryBuilder获得。
   而SqlSessionFactoryBuilder则可以从XML配置文件互或一个预先定制的Configuration的实例构建出SqlSessionFactory的实例。
      从XML文件中构建SQLSessionFactory的实例非常简单，建议使用类路径下的资源文件进行配置。但是也可以使用任意的输入流(InputStream)实例,包括
   字符串形式的文件路径或者file://的URL形式的文件路径来配置。MyBatis   包含一二明教Resource的工具类，它包含一些实用的方法，可以从classpath
   或者其他位置加载资源文件更加容易。
   String resource = "org/mybatis/example/mybatis-config.xml";
   InputStream inputStream =  Resources.getResourceAsStream(resource);
   sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

   XML配置文件(configuration XML)中包含了对MyBatis系统的核心设置，包含获取数据库连接实例的数据源(DataSource)和决定事务范围和控制方式的
    事务管理器(TransactionManager)。

    XML 配置文件（configuration XML）中包含了对 MyBatis 系统的核心设置，包含获取数据库连接实例的数据源（DataSource）和决定事务范围和控制方式的事务管理器（TransactionManager）。XML 配置文件的详细内容后面再探讨，这里先给出一个简单的示例：

    <?xml version="1.0" encoding="UTF-8" ?>
    <!DOCTYPE configuration
      PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
      "http://mybatis.org/dtd/mybatis-3-config.dtd">
    <configuration>
      <environments default="development">
        <environment id="development">
          <transactionManager type="JDBC"/>
          <dataSource type="POOLED">
            <property name="driver" value="${driver}"/>
            <property name="url" value="${url}"/>
            <property name="username" value="${username}"/>
            <property name="password" value="${password}"/>
          </dataSource>
        </environment>
      </environments>
      <mappers>
        <mapper resource="org/mybatis/example/BlogMapper.xml"/>
      </mappers>
    </configuration>
    当然，还有很多可以在XML 文件中进行配置，上面的示例指出的则是最关键的部分。要注意 XML 头部的声明，用来验证 XML 文档正确性。environment 元素体中包含了事务管理和连接池的配置。mappers 元素则是包含一组 mapper 映射器（这些 mapper 的 XML 文件包含了 SQL 代码和映射定义信息）。

    不使用 XML 构建 SqlSessionFactory
    如果你更愿意直接从 Java 程序而不是 XML 文件中创建 configuration，或者创建你自己的 configuration 构建器，MyBatis 也提供了完整的配置类，提供所有和 XML 文件相同功能的配置项。

    DataSource dataSource = BlogDataSourceFactory.getBlogDataSource();
    TransactionFactory transactionFactory = new JdbcTransactionFactory();
    Environment environment = new Environment("development", transactionFactory, dataSource);
    Configuration configuration = new Configuration(environment);
    configuration.addMapper(BlogMapper.class);
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration);
    注意该例中，configuration 添加了一个映射器类（mapper class）。映射器类是 Java 类，它们包含 SQL 映射语句的注解从而避免了 XML 文件的依赖。不过，由于 Java 注解的一些限制加之某些 MyBatis 映射的复杂性，XML 映射对于大多数高级映射（比如：嵌套 Join 映射）来说仍然是必须的。有鉴于此，如果存在一个对等的 XML 配置文件的话，MyBatis 会自动查找并加载它（这种情况下， BlogMapper.xml 将会基于类路径和 BlogMapper.class 的类名被加载进来）。具体细节稍后讨论。

    从 SqlSessionFactory 中获取 SqlSession
    既然有了 SqlSessionFactory ，顾名思义，我们就可以从中获得 SqlSession 的实例了。SqlSession 完全包含了面向数据库执行 SQL 命令所需的所有方法。你可以通过 SqlSession 实例来直接执行已映射的 SQL 语句。例如：

    SqlSession session = sqlSessionFactory.openSession();
    try {
      Blog blog = (Blog) session.selectOne("org.mybatis.example.BlogMapper.selectBlog", 101);
    } finally {
      session.close();
    }
    诚然这种方式能够正常工作，并且对于使用旧版本 MyBatis 的用户来说也比较熟悉，不过现在有了一种更直白的方式。使用对于给定语句能够合理描述参数和返回值的接口（比如说BlogMapper.class），你现在不但可以执行更清晰和类型安全的代码，而且还不用担心易错的字符串字面值以及强制类型转换。

    例如：

    SqlSession session = sqlSessionFactory.openSession();
    try {
      BlogMapper mapper = session.getMapper(BlogMapper.class);
      Blog blog = mapper.selectBlog(101);
    } finally {
      session.close();
    }


    探究已映射的sql语句
        映射的两种实现方式： 1)xml实现
                         2)注解实现
        java实现的两种方式
                         1)完全限定名的形式
                           Blog blog = (Blog)session.selectOne(org.mybatis.example.BlogMapper.selectBlog",101)
                         2)类中调用的方式
                           BlogMapper mapper = session.getMapper(BlogMapper.class);
                           Blog blog = mapper.selectBlog(101)
        SqlSessionFactoryBuilder

        这个类可以被实例化、使用和丢弃，一旦创建了 SqlSessionFactory，就不再需要它了。因此 SqlSessionFactoryBuilder 实例的最佳范围是方法范围（也就是局部方法变量）。你可以重用 SqlSessionFactoryBuilder 来创建多个 SqlSessionFactory 实例，但是最好还是不要让其一直存在以保证所有的 XML 解析资源开放给更重要的事情。

        SqlSessionFactory

        SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由对它进行清除或重建。使用 SqlSessionFactory 的最佳实践是在应用运行期间不要重复创建多次，多次重建 SqlSessionFactory 被视为一种代码“坏味道（bad smell）”。因此 SqlSessionFactory 的最佳范围是应用范围。有很多方法可以做到，最简单的就是使用单例模式或者静态单例模式。

        SqlSession

        每个线程都应该有它自己的 SqlSession 实例。SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的范围是请求或方法范围。绝对不能将 SqlSession 实例的引用放在一个类的静态域，甚至一个类的实例变量也不行。也绝不能将 SqlSession 实例的引用放在任何类型的管理范围中，比如 Serlvet 架构中的 HttpSession。如果你现在正在使用一种 Web 框架，要考虑 SqlSession 放在一个和 HTTP 请求对象相似的范围中。换句话说，每次收到的 HTTP 请求，就可以打开一个 SqlSession，返回一个响应，就关闭它。这个关闭操作是很重要的，你应该把这个关闭操作放到 finally 块中以确保每次都能执行关闭。下面的示例就是一个确保 SqlSession 关闭的标准模式：

        SqlSession session = sqlSessionFactory.openSession();
        try {
          // do work
        } finally {
          session.close();
        }
        在你的所有的代码中一致性地使用这种模式来保证所有数据库资源都能被正确地关闭。

        映射器实例（Mapper Instances）

        映射器是创建用来绑定映射语句的接口。映射器接口的实例是从 SqlSession 中获得的。因此从技术层面讲，映射器实例的最大范围是和 SqlSession 相同的，因为它们都是从 SqlSession 里被请求的。尽管如此，映射器实例的最佳范围是方法范围。也就是说，映射器实例应该在调用它们的方法中被请求，用过之后即可废弃。并不需要显式地关闭映射器实例，尽管在整个请求范围（request scope）保持映射器实例也不会有什么问题，但是很快你会发现，像 SqlSession 一样，在这个范围上管理太多的资源的话会难于控制。所以要保持简单，最好把映射器放在方法范围（method scope）内。下面的示例就展示了这个实践：


    XMl配置文件
        属性(properties)
        设置(settings)
        类型别名(typeAliases)
        类型处理(typeHandlers)
        对象工厂(objectFactory)
        插件(plugins)
        环境配置(environments)
        数据库厂商标识(databaseIdProvider)
        映射器


   XML映射文件
        MyBatis的正真强大在于它的映射语句，也是它的魔力所在。由于它的异常强大，映射器的XML文件就显得相对简单。如
        SQL映射文件有很少的几个顶级元素
        cache-给定命名空间的缓存配置
        resultMap-是最复杂也是最强大的元素，用来描述如何从数据库结果集中加载对象
        sql-可被其他语句引用的可重用语句块
        insert-映射插入语句
        update-映射更新语句
        delete-映射删除语句
        select-映射查询语句


        <select id="selectPerson" parameterType="int" resultType="hashmap">
          SELECT * FROM PERSON WHERE ID = #{id}
        </select>
        这个语句被称作 selectPerson，接受一个 int（或 Integer）类型的参数，并返回一个 HashMap 类型的对象，其中的键是列名，值便是结果行中的对应值。

        注意参数符号：

        #{id}
        这就告诉 MyBatis 创建一个预处理语句参数，通过 JDBC，这样的一个参数在 SQL 中会由一个“?”来标识，并被传递到一个新的预处理语句中，就像这样：

        // Similar JDBC code, NOT MyBatis…
        String selectPerson = "SELECT * FROM PERSON WHERE ID=?";
        PreparedStatement ps = conn.prepareStatement(selectPerson);
        ps.setInt(1,id);

        如果都通过jdbc代码来提取结果并将它们映射到对象实例中，这就是MyBatis节省你时间的地方。我们需要了解参数和结果映射
        <select
          id="selectPerson"                     命名空间中唯一的标识符号，可以被用来引用这条语句
          parameterType="int"                   将会传入这条语句的参数的完全限定名或别名。这个属性是可选的，因为MyBatis可以通过TypeHandler推断出具体传入语句的参数，默认值为unset
          parameterMap="deprecated"             这是医用外部parameterMap的已经被废弃的方法。使用内联参数和parameterType属性
          resultType="hashmap"                  从这表语句中返回的期望类型的类的去哪群限定名或别名。注意如果集合类型，那应该是集合可以包含该的类型，而不是集合本身。使用resultType或resultMap，但不能同时使用
          resultMap="personResultMap"           外部resultMap的命名引用。结果集的映射是MyBatis最强大的特性，对其中一个很好的理解的话，许多复杂的映射的情形都能迎刃而解。使用resutlMap或resultType，但不能同时使用
          flushCache="false"                    将其设置为true，任何时候只要语句被调用，都会导致本地缓存和二级缓存都会被清空，默认值:false
          useCache="true"                       将其设置为true，将会导致本条语句的结果被二级缓存，默认值:对select设置为true
          timeout="10000"                       这个设置在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为unset(依赖驱动)
          fetchSize="256"                       这是尝试影响驱动程序每次批量返回的结果行数和设置值相等。默认为unset(依赖驱动)
          statementType="PREPARED"              statment,preparedStatement,CallableStatement其中的一个，默认值为preparedStatement
          resultSetType="FORWARD_ONLY">         forward_only,scroll_sensitive，默认值为unset

          resultSets                            这个设置仅对多结果集的情况适用，它将列出语句执行后返回的结果集并给每个结果集一个名称，名称都是逗号分隔的


          insert ,update ,delete
                                 useGeneratedKeys(仅对update与insert有用)这会明MyBatis适用JDBC的getGenerateKeys方法来去除数据库内部生成的主键(比如:像MySql和Sql Server这样的关系数据管理系统的自动递增字段),默认值为:false
                                 keyProperty     (仅对insert和update有用)唯一标记属性，MyBatis会通过getGeneratedKeys的反沪指或者通过insert语句的selectKey子元素设置它的键值，默认值为unset，如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表
                                 keyColumn       (仅对insert和update有用)通过生成的键值设置表中的列名,这个设置尽在某些数据库(像PostgreSQL)是必须的，当主键列不是表中的第一列的时候需要设置
                                                  如果希望得到生成的列，也可以是逗号分隔的属性名称列表。
                                 databaseId       如果配置了databaseIdProvider,MyBatis会加载所有的布袋databaseId或者匹配当前databaseId的语句；如果带或者不带的有都有，则不带的会被忽略



          sql
                这个元可以被用来定义可重用的SQL代码段，可以包含在其他语句中，它可以被静态地(在加载参数)参数化，不同的属性值通过包含的实例变化


          Parameters
                    参数是MyBatis非常强大的元素，对于简单的做法，大概90%的情况参数都很少
                    简单的参数
                        <select id="selectUsers" resultType="User">
                          select id, username, password
                          from users
                          where id = #{id}
                        </select>
                        参数的类型被设置为int，这样这个参数可以被设置成任何内容。原生的类型或简单数据类型(比如整型和字符串)因为没有相关属性，它会完全用参数值来替代

                    对象参数
                        <insert id="insertUser" parameterType="User">
                          insert into users (id, username, password)
                          values (#{id}, #{username}, #{password})
                        </insert>
                        如果User类型的参数对象传递到了语句中id,username,password属性将会被查找，然后将它们的值传入到预处理语句的参数中。

                    特殊类型参数
                        #{property,javaType=int,jdbcType=NUMERIC}
                                    javaType通常可以从参数对象中去确定，前提是只要对象不是一个HashMap，那么javaType应该被确定来保证使用正确类型处理器
                                    如果null被当做值来传递，对于所有可能为空的列，JDBC Type是需要的
                                    对于数值类型，还有一个小数保留位数的设置，来确定小东湖店后保留的位数。

          #{height,javaType=double,jdbcType=NUMERIC,numericScale=2}
                    对于数值类型，还有一个小数保留位数的设置，来确定小数点后保留的位数
                    尽管所有这些强大的选项很多时候你只简单指定属性名，其他事情MyBatis会自己去推断，最多你需要为可能为空的列明指定jdbcType
          字符串替换
                默认情况下，使用#{}格式的语法会导致MyBatis创建预处理语句属性并安全的设置值。这样做更安全，更迅速，通常也是首选做法，不过有时你只是想直接在
                SQL语句中插入一个不改变的字符串，比如ORDER BY,你可以这样来是用ORDER BY ${columnName}
                这里MyBatis不会修改或转义字符串
                注意:以这种方式接受从用户输出的内容并提供给语句中不变的字符串是不安全的，会导致潜在的SQL注入攻击，因此要不允许用户输入这些这段，要么
                    自行转移并检查




        Result Maps
           resultmap元素是MyBatis中国最重要最强大的元素,它就是让你远离90%的需要从结果集中去除数据的JDBC代码的那个东西，而且在一些情形下允许你做一些
        JDBC不支持的事情。事实上，编写相似于复杂语句联合映射这些灯同的代码，也许可以扩过上千行的代码。REsultMap的设计就是简单语句不需要明确的结果映射，
        而很多复杂语句确实需要描述他们的关系。

        你已经看到简单映射语句的示例了,但没有明确的 resultMap。比如:
        <select id="selectUsers" resultType="map">
          select id, username, hashedPassword
          from some_table
          where id = #{id}
        </select>
        这样一个语句简单作用于所有列被自动映射到HashMap的键上，这由resultType属性指定。这在很多情况下是有用的，但是HashMap不能很好描述一个领域模型。
        那样你的应用程序会使用JavaBeans或POJOs(Plain Old Java Objects普通的java对象)作为领域模型。MyBatis对两种都支持

      <resultMap id="detailedBlogResultMap" type="Blog">
        <constructor>
          <idArg column="blog_id" javaType="int"/>
        </constructor>
        <result property="title" column="blog_title"/>
        <association property="author" javaType="Author">
          <id property="id" column="author_id"/>
          <result property="username" column="author_username"/>
          <result property="password" column="author_password"/>
          <result property="email" column="author_email"/>
          <result property="bio" column="author_bio"/>
          <result property="favouriteSection" column="author_favourite_section"/>
        </association>
        <collection property="posts" ofType="Post">
          <id property="id" column="post_id"/>
          <result property="subject" column="post_subject"/>
          <association property="author" javaType="Author"/>
          <collection property="comments" ofType="Comment">
            <id property="id" column="comment_id"/>
          </collection>
          <collection property="tags" ofType="Tag" >
            <id property="id" column="tag_id"/>
          </collection>
          <discriminator javaType="int" column="draft">
            <case value="1" resultType="DraftPost"/>
          </discriminator>
        </collection>
      </resultMap>

      resultMap
              constructor   类在实例化时，用来注入结果到构造方法中
                idArg       ID参数；表姐过作为ID可以帮助提供整体效能
                arg         注入到构造方法中的一个普通结果
              id            一个ID结果；标记结果作为ID可以帮助提高整体效能
              result        注入到字段或JavaBean属性的普通结果
              association   一个复杂的类型关联；许多结果将包成这种类型
                            嵌入结果映射-结果映射自身的集或者参考第一个
              discriminator 使用结果值来决定使用哪儿结果映射
                 case       基于某些值得结果映射
                           嵌入结果映射 这种情形结果也映射它本省，因此可以包含很多相同的元素，或者她可以参照一个外普的结果映射

              id & result

              <id property="id" column="post_id"/>
              <result property="subject" column="post_subject"/>
              这些是结果映射最基本内容。id 和 result 都映射一个单独列的值到简单数据类型(字符 串,整型,双精度浮点数,日期等)的单独属性或字段。
              这两者之间的唯一不同是 id 表示的结果将是当比较对象实例时用到的标识属性。这帮 助来改进整体表现,特别是缓存和嵌入结果映射(也就是联合映射) 。
              每个都有一些属性:

               property 映射列结果的字段或属性。如果匹配的是存在的和个定名称相同的JavaBeans的属性，那么就会使用。否则MyBais将会寻找给定的property的字段
                        这两种情形你可以使用通常点式的复杂属性导航。比如你可以这样映射一些东西:"usernmae"或者映射到一些复杂的东西:"address.treet.number"

               column   从数据库中得到的列名，或者是列明的重命名标签。这也是通常回合传递给resultSet.getString(columnName)方法参数中相同的字符串
               javaType 一个Java累的完全限定名或一个类型别名。如果你映射到一个JavaBean,MyBatis通常可以断定类型。然而，如果你映射到的是HashMap,那么你应该
                        明确指定给你javaType来保证所需的行为
               jdbcType 在这个表格之后的所支持的JDBC类型列表中的类型。JDBC类型时仅仅需要对插入，更新和删除操作可能为空的列进行处理，这是JDBc jdbcTye的需要
                        而不是MyBatis的。如果你直接使用JDBC变成，你需要制定这个类型，但仅仅对可能为空的值。

               typeHandler 使用这个属性,你可以覆盖默 认的类型处理器。这个属性值是类的完全限定名或者是一个类型处理 器的实现,或者是类型别名。
        关联
            <association property="author" column="blog_author_id" javaType="Author">
              <id property="id" column="author_id"/>
              <result property="username" column="author_username"/>
            </association>
            关联元素处理“有一个”类型的关系。比如,在我们的示例中,一个博客有一个用户。 关联映射就工作于这种结果之上。你指定了目标属性,来获取值的列,属性的 java 类型(很 多情况下 MyBatis 可以自己算出来) ,如果需要的话还有 jdbc 类型,如果你想覆盖或获取的 结果值还需要类型控制器。
            关联中不同的是ini需要告诉MyBatis如何加载关联。MyBatis在这方面会有两种不同的而方式
            嵌套查询:通过执行另外一个SQL映射语句来返回语气的复杂类型
            嵌套结果:使用嵌套结果映射来处理重复的蓝河结果的子集

        关联的嵌套查询
            <resultMap id="blogResult" type="Blog">
              <association property="author" column="author_id" javaType="Author" select="selectAuthor"/>
            </resultMap>

            <select id="selectBlog" resultMap="blogResult">
              SELECT * FROM BLOG WHERE ID = #{id}
            </select>

            <select id="selectAuthor" resultType="Author">
              SELECT * FROM AUTHOR WHERE ID = #{id}
            </select>

        我们有两个查询语句，一个用来加载博客，另外一个用来加载作者，而且博客的结果映射描述了"selectAuthor"语句应该被用来加载它的
        author属性，其他所有的属性都会被自动加载，假设他们的列和属性名相匹配。

        这种方式很简单，但是对于大型数据集合和列表将不会很表现很好


        关联的嵌套结果
            <select id="selectBlog" resultMap="blogResult">
              select
                B.id            as blog_id,
                B.title         as blog_title,
                B.author_id     as blog_author_id,
                A.id            as author_id,
                A.username      as author_username,
                A.password      as author_password,
                A.email         as author_email,
                A.bio           as author_bio
              from Blog B left outer join Author A on B.author_id = A.id
              where B.id = #{id}
            </select>

            注意这个联合查询，以及采取保护来确保所有结果被唯一而且清晰的名字来重命名。这使得映射非常简单